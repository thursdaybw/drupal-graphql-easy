<?php

namespace Drupal\graphql_easy\Plugin\GraphQL\Resolver;

use Drupal\Component\Plugin\PluginBase;
use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
use Drupal\graphql\GraphQL\Resolver\ResolverInterface;
use Drupal\graphql\GraphQL\ResolverBuilder;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Base class for Preset resolver plugins.
 */
abstract class ResolverPluginBase extends PluginBase implements ResolverPluginInterface, ContainerFactoryPluginInterface {

  /**
   * The resolver builder utility from graphql.
   *
   * @var \Drupal\graphql\GraphQL\ResolverBuilder
   */
  protected ResolverBuilder $builder;

  /**
   * {@inheritDoc}
   */
  public function __construct(array $configuration, $plugin_id, $plugin_definition, ResolverBuilder $builder) {
    parent::__construct($configuration, $plugin_id, $plugin_definition);
    $this->builder = $builder;
  }

  /**
   * {@inheritDoc}
   */
  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
    return new static(
      $configuration,
      $plugin_id,
      $plugin_definition,
      new ResolverBuilder(),
    );
  }

  /**
   * Gets the resolver generated by this plugin.
   *
   * @param array $resolver_config
   *   An array of resolver configuration values.
   * @param string $drupal_field_name
   *   The drupal field name to be resolved.
   *
   * @return \Drupal\graphql\GraphQL\Resolver\ResolverInterface
   *   The resolver.
   */
  abstract public function getResolver(array $resolver_config, string $drupal_field_name): ResolverInterface;

}
